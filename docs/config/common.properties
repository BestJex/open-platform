# 资源服务器公共配置.
# API网关访问地址
opencloud.common.api-server-addr=http://localhost:8888
# 管理后台前端访问地址
opencloud.common.admin-server-addr=http://localhost:8080
# 平台认证服务地址
opencloud.common.auth-server-addr=http://localhost:8211
# 默认使用OpenHelper.buildRedisTokenServices(RedisConnectionFactory redisConnectionFactory)
# 公共客户端配置,适用于OpenHelper.buildRemoteTokenServices(OpenCommonProperties properties)
opencloud.common.client-id=7gBZcbsC7kLIWCdELIl8nxcs
opencloud.common.client-secret=0osTIhce7uPvDKHz6aa67bhCukaKoYl4
opencloud.common.scope=userProfile
opencloud.common.user-authorization-uri=${opencloud.common.auth-server-addr}/oauth/authorize
opencloud.common.access-token-uri=${opencloud.common.api-server-addr}/admin/oauth/token
opencloud.common.token-info-uri=${opencloud.common.api-server-addr}/admin/oauth/check_token
opencloud.common.user-info-uri=${opencloud.common.api-server-addr}/admin/current/user
# 资源服务器jwt签名秘钥,适用于OpenHelper.buildJwtTokenServices(OpenCommonProperties properties)
opencloud.common.jwt-signing-key=2cde1eaa60fe4af1987f94caa13f29a2
# swagger2默认配置
opencloud.api.api-debug=true
opencloud.swagger2.enabled=true
opencloud.swagger2.client-id=${opencloud.common.client-id}
opencloud.swagger2.client-secret=${opencloud.common.client-secret}
opencloud.swagger2.scope=${opencloud.common.scope}
opencloud.swagger2.access-token-uri=${opencloud.common.access-token-uri}
opencloud.swagger2.user-authorization-uri=${opencloud.common.user-authorization-uri}
# 文件上传配置
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=200MB
# 是否开启参数验签
opencloud.api.check-sign=false
# Sentinel 流量控制配置
spring.cloud.sentinel.enabled=true
spring.cloud.sentinel.transport.dashboard=localhost:8080
spring.cloud.sentinel.transport.port=8719
feign.sentinel.enabled=true
# Sentinel 熔断降级配置
spring.cloud.circuitbreaker.sentinel.enabled=true
# Spring Boot Admin设置
spring.security.user.name=sba
spring.security.user.password=123456
# Undertow 配置
# 是否启动日志
server.undertow.accesslog.enabled=false
# 日志存放目录
server.undertow.accesslog.dir=logs
# 日志格式
server.undertow.accesslog.pattern=common
# 日志文件名前缀
server.undertow.accesslog.prefix=access
# 日志文件名后缀
server.undertow.accesslog.suffix=.log
# HTTP POST请求最大的大小
server.undertow.max-http-post-size=0
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=4
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=20
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
server.undertow.buffer-size=1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
server.undertow.buffers-per-region=1024
# 是否分配的直接内存(NIO直接分配的堆外内存)
server.undertow.direct-buffers=true